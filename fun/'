#!/usr/bin/env python

class Stack(object):
    def __init__(self):
        self.stack = []

    def push(self, val):
        self.stack.append(val)
        return self

    def pop(self):
        return self.stack.pop()

    @property
    def top(self):
        return self.stack[-1]

class Node(object):
    def __init__(self, left=None, right=None, value=None):
        self.left = left
        self.right = right
        self.value = value

    def insert(self, val):
        if val > self.value:
            if self.right:
                self.right.insert(val)
            else:
                self.right = Node(value=val)
        elif val < self.value:
            if self.left:
                self.left.insert(val)
            else:
                self.left = Node(value=val)

    def traverse(self):
        def t(node):
            if not node:
                return []
            return t(node.left) + [node.value] + t(node.right)
        return str(t(self))

    def traverse_iter(self):
        # a stack of nodes to traverse
        stack = Stack().push(self)
        vals = []
        while stack:
            print stack
            if stack.top.left:
                stack.push(stack.top.left)
                continue

            node = stack.pop()
            vals.append(node.value)
            if node.right:
                stack.push(node.right)

    def __str__(self):
        return self.traverse_iter()


b = Node(value=5)
b.insert(2)
b.insert(4)
b.insert(40)
b.insert(10)
b.insert(20)
print b
